# Generated by Django 5.1.7 on 2025-07-22 01:44

from django.db import migrations


def create_default_specialties(apps, schema_editor):
    """建立預設的專業領域分類和專業領域"""
    SpecialtyCategory = apps.get_model('therapists', 'SpecialtyCategory')
    Specialty = apps.get_model('therapists', 'Specialty')
    
    # 建立預設分類
    categories_data = [
        ('理論取向', '心理治療的理論方法'),
        ('服務族群', '專門服務的對象群體'),
        ('議題專精', '特定心理健康議題的專業'),
        ('治療方式', '特定的治療技術或方法'),
    ]
    
    categories = {}
    for name, description in categories_data:
        category, created = SpecialtyCategory.objects.get_or_create(
            name=name,
            defaults={'description': description}
        )
        categories[name] = category
    
    # 建立預設專業領域
    specialties_data = [
        # 理論取向
        ('認知行為治療', '理論取向', '以認知和行為改變為主的治療方法'),
        ('心理動力治療', '理論取向', '探索潛意識動機的治療方法'),
        ('人本主義治療', '理論取向', '以人為中心的治療方法'),
        ('家族系統治療', '理論取向', '從家庭系統角度進行治療'),
        ('完形治療', '理論取向', '注重此時此刻覺察的治療方法'),
        
        # 服務族群
        ('兒童諮商', '服務族群', '專門服務兒童的心理諮商'),
        ('青少年諮商', '服務族群', '專門服務青少年的心理諮商'),
        ('成人諮商', '服務族群', '專門服務成人的心理諮商'),
        ('伴侶諮商', '服務族群', '專門服務伴侶關係的諮商'),
        ('家庭諮商', '服務族群', '專門服務家庭的諮商'),
        
        # 議題專精
        ('憂鬱症治療', '議題專精', '專精於憂鬱症的治療'),
        ('焦慮症治療', '議題專精', '專精於焦慮症的治療'),
        ('創傷治療', '議題專精', '專精於心理創傷的治療'),
        ('成癮治療', '議題專精', '專精於各種成癮問題的治療'),
        ('失眠治療', '議題專精', '專精於睡眠障礙的治療'),
        ('自傷防治', '議題專精', '專精於自傷行為的預防和治療'),
        
        # 治療方式
        ('沙遊治療', '治療方式', '使用沙盤進行的心理治療'),
        ('藝術治療', '治療方式', '透過藝術創作進行的治療'),
        ('遊戲治療', '治療方式', '透過遊戲進行的心理治療'),
        ('正念治療', '治療方式', '融入正念技巧的治療方法'),
        ('EMDR', '治療方式', '眼動身心重建療法'),
    ]
    
    for name, category_name, description in specialties_data:
        Specialty.objects.get_or_create(
            name=name,
            category=categories[category_name],
            defaults={'description': description}
        )


def migrate_therapist_specialties(apps, schema_editor):
    """將療師的舊專業領域文字遷移到新的關聯式結構"""
    TherapistProfile = apps.get_model('therapists', 'TherapistProfile')
    Specialty = apps.get_model('therapists', 'Specialty')
    
    # 取得所有專業領域，建立名稱對應字典
    specialties_map = {
        specialty.name.lower(): specialty 
        for specialty in Specialty.objects.all()
    }
    
    # 遷移每個療師的專業領域
    for therapist in TherapistProfile.objects.all():
        if therapist.specialties_text:
            # 將舊的文字專業領域存入 specialties_text 欄位
            # 同時嘗試對應到新的關聯式專業領域
            
            # 簡單的文字匹配邏輯
            text_lower = therapist.specialties_text.lower()
            matched_specialties = []
            
            for specialty_name, specialty_obj in specialties_map.items():
                if specialty_name in text_lower:
                    matched_specialties.append(specialty_obj)
            
            # 如果有匹配到的專業領域，建立關聯
            if matched_specialties:
                therapist.specialties.set(matched_specialties)


def reverse_migration(apps, schema_editor):
    """反向遷移（清除資料）"""
    SpecialtyCategory = apps.get_model('therapists', 'SpecialtyCategory')
    Specialty = apps.get_model('therapists', 'Specialty')
    
    # 清除所有專業領域資料
    Specialty.objects.all().delete()
    SpecialtyCategory.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('therapists', '0003_specialtycategory_therapistprofile_specialties_text_and_more'),
    ]

    operations = [
        migrations.RunPython(
            create_default_specialties,
            reverse_migration
        ),
        migrations.RunPython(
            migrate_therapist_specialties,
            migrations.RunPython.noop
        ),
    ]
